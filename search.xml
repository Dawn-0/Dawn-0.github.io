<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++_primer_V5 学习笔记-第一章</title>
    <url>/2020/07/13/c-primer-1/</url>
    <content><![CDATA[<p>本章介绍c++的大部分基础内容：类型、变量、表达式、语句及函数。并介绍如何编译及运行程序。</p>
<a id="more"></a>

<h4 id="编写一个简单的C-程序"><a href="#编写一个简单的C-程序" class="headerlink" title="编写一个简单的C++程序"></a>编写一个简单的C++程序</h4><ul>
<li>函数定义<ul>
<li>返回类型</li>
<li>函数名</li>
<li>形参列表（允许为空</li>
<li>函数体</li>
</ul>
</li>
<li>main函数的返回类型必须为int。</li>
<li><strong>内置类型（built-in-type）：语言自身定义的类型</strong></li>
<li>函数体中使用return结束函数的执行，return返回的值与函数的返回类型相容</li>
<li>大多数系统中，main的返回值被用来指示状态，返回0表示成功，非0值常用于指出错误类型</li>
</ul>
<h5 id="编译、运行程序"><a href="#编译、运行程序" class="headerlink" title="编译、运行程序"></a>编译、运行程序</h5><ul>
<li><p>集成开发环境IDE：将编译器与其他程序创建和分析工具包装在一起</p>
</li>
<li><p>源文件：程序文件常被称为 <strong>源文件（source file</strong></p>
</li>
<li><p>源文件名字以后缀结尾：.cc .cxx .cpp .cp .C    …</p>
</li>
<li><p>命令行运行编译器</p>
<ul>
<li><p>CC是编译器程序的名字 main程序在prog1.cc中</p>
</li>
<li><p>编译器生成一个可执行文件 windows为prog1.exe unix后缀为<strong>a.out</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ CC prog1.cc</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>windows运行可执行文件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ prog1</span><br><span class="line">$ .\prog1</span><br></pre></td></tr></table></figure>
</li>
<li><p>unix运行可执行文件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ a.out</span><br><span class="line">$ ./a.out</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>在unix和windows中，执行完程序后都可以使用 <strong>echo命令获得返回值</strong> </p>
<ul>
<li><p>unix 获得状态</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows 查看状态</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">%ERRORLEVEL%</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>GNU编译器</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ g++ -o prog1 prog1.cc</span><br></pre></td></tr></table></figure>

<ul>
<li><p>-o prog1是编译器参数 指定可执行文件的文件名</p>
</li>
<li><p>该指令生成可执行文件 windows后缀为.exe UNIX无后缀</p>
</li>
<li><p>若省略 -o prog1参数 windows生成a.exe UNIX生成a.out</p>
</li>
</ul>
</li>
<li><p>微软Visual Studio编译器</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">me</span>\<span class="title">Programs</span>&gt; <span class="title">c1</span> /<span class="title">EHsc</span> <span class="title">prog1.cpp</span></span></span><br></pre></td></tr></table></figure>

<p>c1调用编译器   /EHsc是编译器选项(打开标准异常处理</p>
<ul>
<li>生成可执行文件prog1.exe</li>
</ul>
</li>
<li><p>编译器可以对有问题的程序结构发出警告 打开选项</p>
<ul>
<li>GNU使用-Wall VS编译器使用/W4</li>
</ul>
</li>
</ul>
<h4 id="初识输入输出"><a href="#初识输入输出" class="headerlink" title="初识输入输出"></a>初识输入输出</h4><ul>
<li><p>C++语言使用 <strong>标准库</strong> 提供IO机制等</p>
</li>
<li><p>iostream库 </p>
<ul>
<li>包含istream和ostream 表示输入流和输出流</li>
<li>一个流是一个字符序列，从IO设备读出/写入IO设备</li>
</ul>
</li>
<li><p>标准输入输出对象</p>
<ul>
<li>cin 标准输入 istream类型</li>
<li>cout 标准输出 ostream类型</li>
<li>cerr 标准错误 输出警告和错误信息</li>
<li>clog 输出程序运行时的一般性信息</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用iostream库，iostream指出了一个 <strong>头文件</strong></li>
</ul>
</li>
<li><p>表达式：由运算对象和运算符组成</p>
</li>
<li><p>输出运算符&lt;&lt;   ： 接受两个运算对象 左侧为ostream对象 右侧是要打印的值 将给定值写入给定的ostream对象中</p>
</li>
<li><p>操纵符 std::endl 写入的效果是结束当前行 <strong>将与设备关联的缓冲区内容刷到设备中</strong></p>
<ul>
<li>缓冲刷新操作保证 到目前为止程序产生的输出 <strong>真正写入输出流中</strong> 而非内存中等待写入</li>
<li>调试时的打印语句应该保证一直刷新流，防止崩溃时输出还留在缓冲区 难以判断出错位置</li>
</ul>
</li>
<li><p>前缀std:: 表示定义在名为std的命名空间中   ::是作用域运算符</p>
</li>
<li><p>标准库定义的所有名字都在命名空间std中</p>
</li>
<li><p>输入运算符&gt;&gt; 左侧为istream对象 右侧为存入的对象</p>
</li>
<li><p>标准库定义了不同版本的运算符 处理不同类型的运算对象</p>
</li>
</ul>
<h4 id="注释comments-简介"><a href="#注释comments-简介" class="headerlink" title="注释comments 简介"></a>注释comments 简介</h4><ul>
<li><p>两种注释</p>
<ul>
<li>单行注释：双斜线开始，换行符结束。可以包含任何文本，包括额外的双斜线。</li>
<li>界定符对注释：以 /* 开始，以 */ 结束。可以包含除了 */ 以外的任何内容，包括换行符、</li>
</ul>
</li>
<li><p>常使用的风格：注释内的每行都以一个星号开头</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abc</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * aaaaa</span></span><br><span class="line"><span class="comment"> * aaaaa</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注释界定符不能嵌套，最好的注释方式是用单行注释方式注释掉代码段的每一行。</p>
</li>
</ul>
<h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h4><ul>
<li><p>while语句</p>
</li>
<li><p>for语句</p>
</li>
<li><p>读取数量不定的输入数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>,value=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;value)</span><br><span class="line">	&#123;</span><br><span class="line">		sum+=value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>while使用istream对象作为条件，检测流的状态。若流是有效的，检测成功；遇到文件结束符（end-of-file）或无效输入。istream对象无效，检测条件为假。</li>
</ul>
</li>
<li><p>文件结束符：windows ctrl+Z 再enter或return UNIX输入ctrl+D</p>
</li>
<li><p>编译器：检查形式上的错误，错误信息包含行号和简短描述</p>
<ul>
<li>语法错误</li>
<li>类型错误</li>
<li>声明错误</li>
</ul>
</li>
<li><p>按照报告顺序逐个修正错误，修正后立即重新编译。</p>
</li>
<li><p>if语句</p>
</li>
<li><p>左花括号必须是形参列表后的第一个非空、非注释的字符</p>
</li>
</ul>
<h4 id="类简介（class"><a href="#类简介（class" class="headerlink" title="类简介（class"></a>类简介（class</h4><ul>
<li><p>定义类来定义自己的数据结构</p>
</li>
<li><p>在头文件中定义（后缀.h .H .hxx .hpp …)</p>
</li>
<li><p>类的作者决定了类 类型对象上可以使用的所有操作</p>
</li>
<li><p>包含标准库的头文件 使用尖括号&lt;&gt; ；不属于标准库的头文件 使用双引号””</p>
</li>
<li><p>文件重定向：将标准输入和标准输出与命名文件关联起来</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ addItems &lt;infile &gt;outfile</span><br></pre></td></tr></table></figure>

<p>addItems是编译后的可执行文件，则上述命令会从当前目录的 一个名为infile的文件读取数据，并将结果写入一个名为outfile的文件中</p>
</li>
<li><p>成员函数（方法：定义为类的一部分的函数</p>
</li>
<li><p>点运算符(.)：指定类的成员</p>
</li>
<li><p>调用运算符（ () ）：调用一个函数，括号内放置实参（可能没有</p>
</li>
</ul>
<h4 id="术语表"><a href="#术语表" class="headerlink" title="术语表"></a>术语表</h4><ul>
<li>缓冲区（buffer：IO设施通常将输入或输出数据保存在一个缓冲区中，读写缓冲区的动作与程序无关。<ul>
<li>可以显式刷新输出缓冲，强制将缓冲区的数据写入输出设备</li>
<li>读cin 或 程序非正常终止 时，会刷新cout</li>
</ul>
</li>
<li>Cerr：ostream对象，写到cerr的数据默认不缓冲。常用于输出错误信息或不属于程序正常逻辑的输出内容。</li>
<li>clog：ostream对象。写到clog的数据默认缓冲。报告程序的执行信息，存入一个日志文件中。</li>
<li>main函数： <strong>每个程序有且只有一个命名为main的函数</strong></li>
<li>命名空间：将库定义的名字放在一个单一位置的机制。避免名字冲突</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo文章更新较慢</title>
    <url>/2020/06/28/hexo%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E8%BE%83%E6%85%A2/</url>
    <content><![CDATA[<p>hexo的相关设置发布到github上生效慢，是chrome的浏览器缓存问题</p>
<h4 id="解决方法：ctrl-f5刷新chrome页面缓存"><a href="#解决方法：ctrl-f5刷新chrome页面缓存" class="headerlink" title="解决方法：ctrl+f5刷新chrome页面缓存"></a>解决方法：ctrl+f5刷新chrome页面缓存</h4>]]></content>
  </entry>
</search>
